package chamoisest.usefulutilities.container;

import chamoisest.usefulutilities.container.slots.SlotUpgrade;
import chamoisest.usefulutilities.init.ModItems;
import chamoisest.usefulutilities.tileentity.TileEntityBlockBreaker;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Items;
import net.minecraft.inventory.Container;
import net.minecraft.inventory.IInventory;
import net.minecraft.inventory.Slot;
import net.minecraft.item.ItemStack;
import net.minecraftforge.items.CapabilityItemHandler;
import net.minecraftforge.items.IItemHandler;
import net.minecraftforge.items.SlotItemHandler;

public class ContainerBlockBreaker extends Container{
	
	private TileEntityBlockBreaker te;
	private IItemHandler handler;
	
	public ContainerBlockBreaker(IInventory playerInv, TileEntityBlockBreaker te){
		this.te = te;
		this.handler = te.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, null); //Gets the inventory from our tile entity

		//Our tile entity slots
		this.addSlotToContainer(new SlotItemHandler(handler, 0, 62, 17));
		this.addSlotToContainer(new SlotItemHandler(handler, 1, 80, 17));
		this.addSlotToContainer(new SlotItemHandler(handler, 2, 98, 17));
		this.addSlotToContainer(new SlotItemHandler(handler, 3, 62, 35));
		this.addSlotToContainer(new SlotItemHandler(handler, 4, 80, 35));
		this.addSlotToContainer(new SlotItemHandler(handler, 5, 98, 35));
		this.addSlotToContainer(new SlotItemHandler(handler, 6, 62, 53));
		this.addSlotToContainer(new SlotItemHandler(handler, 7, 80, 53));
		this.addSlotToContainer(new SlotItemHandler(handler, 8, 98, 53));
		this.addSlotToContainer(new SlotUpgrade(handler, 9, 141, 17));
		this.addSlotToContainer(new SlotUpgrade(handler, 10, 141, 35));
		this.addSlotToContainer(new SlotUpgrade(handler, 11, 141, 53));


		//The player's inventory slots
		int xPos = 8; //The x position of the top left player inventory slot on our texture
		int yPos = 84; //The y position of the top left player inventory slot on our texture

		//Player slots
		for (int y = 0; y < 3; ++y) {
			for (int x = 0; x < 9; ++x) {
				this.addSlotToContainer(new Slot(playerInv, x + y * 9 + 9, xPos + x * 18, yPos + y * 18));
			}
		}

		for (int x = 0; x < 9; ++x) {
			this.addSlotToContainer(new Slot(playerInv, x, xPos + x * 18, yPos + 58));
		}
	}
	
	@Override
	public boolean canInteractWith(EntityPlayer player) {
		return this.te.isUseableByPlayer(player);
	}
	
	 public ItemStack transferStackInSlot(EntityPlayer playerIn, int index)
	    {
	        ItemStack itemstack = ItemStack.EMPTY;
	        Slot slot = (Slot)this.inventorySlots.get(index);

	        if (slot != null && slot.getHasStack())
	        {
	            ItemStack itemstack1 = slot.getStack();
	            itemstack = itemstack1.copy();

	            if (index < this.handler.getSlots())
	            {
	                if (!this.mergeItemStack(itemstack1, handler.getSlots(), 11 + 36, true))
	                {
	                    return ItemStack.EMPTY;
	                }
	            }
	            else
	            {
	            	if(itemstack1.getItem() == ModItems.speedUpgrade){
	            		 if (!this.mergeItemStack(itemstack1, 9, handler.getSlots(), false)){
	            			 return ItemStack.EMPTY;
	            		 }	 
	            	}else if(itemstack1.getItem() == ModItems.fortuneUpgrade){
	            		 if (!this.mergeItemStack(itemstack1, 9, handler.getSlots(), false)){
	            			 return ItemStack.EMPTY;
	            		 }	 
	            	}
	            	else if(itemstack1.getItem() == ModItems.silkTouchUpgrade){
	            		 if (!this.mergeItemStack(itemstack1, 9, handler.getSlots(), false)){
	            			 return (ItemStack)null;
	            		 }	 
	            	}
	            	if (!this.mergeItemStack(itemstack1, 0, handler.getSlots(), false))
		                return (ItemStack)null;
	            }

	            if (itemstack1.isEmpty())
	            {
	                slot.putStack((ItemStack)null);
	            }
	            else
	            {
	                slot.onSlotChanged();
	            }

	            if (itemstack1.getCount() == itemstack.getCount())
	            {
	                return ItemStack.;
	            }

	            slot.onTake(playerIn, itemstack1);
	        }

	        return itemstack;
	    }

}
